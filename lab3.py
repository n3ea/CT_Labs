import numpy as np

r = 3
n = 2**r - 1
k = n - r

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã P —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏–∑ –µ–¥–∏–Ω–∏—Ü
X = np.zeros((k, r), dtype=int)

for i in range(r):
    for j in range(k):
        if (j >> i) & 1:
            X[j, i] = 1
X[0, :] = 1
# –°–æ–∑–¥–∞–Ω–∏–µ –µ–¥–∏–Ω–∏—á–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã I_k
I_k = np.eye(k, dtype=int)

# –ü–æ—Ä–æ–∂–¥–∞—é—â–∞—è –º–∞—Ç—Ä–∏—Ü–∞ G
G = np.hstack((I_k, X))

print('G = \n', G)
H = np.vstack((X, np.eye(n-k)))
print('H = \n',H)

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–∏–Ω–¥—Ä–æ–º–æ–≤
syndrome_map = {}

for i in range(H.shape[0]):
    error = np.zeros(H.shape[0])
    error[i] = 1
    
    syndrome = np.dot(error, H) % 2
    
    syndrome_map[tuple(syndrome)] = tuple(error)

for syndrome, error in syndrome_map.items():
    print(f"–°–∏–Ω–¥—Ä–æ–º: {syndrome} –û—à–∏–±–∫–∞: {error}")

word = np.zeros(G.shape[0])
word[0] = 1
# word = np.array([1, 0, 0, 1])

code_word = np.dot(word, G) % 2

error_index = 0
code_word_with_error = code_word.copy()
code_word_with_error[error_index] = (code_word_with_error[error_index] + 1) % 2

# –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–Ω–¥—Ä–æ–º
syndrome = np.dot(code_word_with_error, H) % 2
print(syndrome)
corrected_code_word = None
if tuple(syndrome) in syndrome_map:
    corrected_code_word = code_word_with_error.copy()
    for i, bit in enumerate(syndrome_map[tuple(syndrome)]):
        corrected_code_word[i] = (corrected_code_word[i] + bit) % 2
else:
    print("–û—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
if np.array_equal(code_word, corrected_code_word):
    print("–û—à–∏–±–∫—É —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
else:
    print("–û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

print("–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", code_word)
print("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π:", code_word_with_error)
print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", corrected_code_word)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–≤—É—Ö–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
code_word = np.dot(word, G) % 2

# –í–Ω–æ—Å–∏–º –¥–≤—É—Ö–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É
error_index_1 = 1
error_index_2 = 2
code_word_with_error = code_word.copy()
code_word_with_error[error_index_1] = (code_word_with_error[error_index_1] + 1) % 2
code_word_with_error[error_index_2] = (code_word_with_error[error_index_2] + 1) % 2

syndrome = np.dot(code_word_with_error, H) % 2
print(syndrome)
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–±–ª–∏—Ü—É —Å–∏–Ω–¥—Ä–æ–º–æ–≤
corrected_code_word = None
if tuple(syndrome) in syndrome_map:
    corrected_code_word = code_word_with_error.copy()
    for i, bit in enumerate(syndrome_map[tuple(syndrome)]):
        corrected_code_word[i] = (corrected_code_word[i] + bit) % 2
else:
    print("2. –û—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
if np.array_equal(code_word, corrected_code_word):
    print("2. –û—à–∏–±–∫—É —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
else:
    print("2. –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

print("2. –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", code_word)
print("2. –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π:", code_word_with_error)
print("2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", corrected_code_word)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç—Ä—ë—Ö–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
code_word = np.dot(word, G) % 2

error_index_1 = 0
error_index_2 = 1
error_index_3 = 2
code_word_with_error = code_word.copy()
code_word_with_error[error_index_1] = (code_word_with_error[error_index_1] + 1) % 2
code_word_with_error[error_index_2] = (code_word_with_error[error_index_2] + 1) % 2
code_word_with_error[error_index_3] = (code_word_with_error[error_index_2] + 1) % 2

# –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–Ω–¥—Ä–æ–º
syndrome = np.dot(code_word_with_error, H) % 2
print(syndrome)
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–±–ª–∏—Ü—É —Å–∏–Ω–¥—Ä–æ–º–æ–≤
corrected_code_word = None
if tuple(syndrome) in syndrome_map:
    corrected_code_word = code_word_with_error.copy()
    for i, bit in enumerate(syndrome_map[tuple(syndrome)]):
        corrected_code_word[i] = (corrected_code_word[i] + bit) % 2
else:
    print("3. –û—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
if np.array_equal(code_word, corrected_code_word):
    print("3. –û—à–∏–±–∫—É —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
else:
    print("3. –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

print("3. –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", code_word)
print("3. –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π:", code_word_with_error)
print("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", corrected_code_word)

# 3.3 –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ä–æ–∂–¥–∞—é—â–µ–π –∏ –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–æ–π
# –º–∞—Ç—Ä–∏—Ü —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –•—ç–º–º–∏–Ω–≥–∞ (ùüêùíì,ùüêùíì ‚àíùíì‚àíùüè,ùüë)  –Ω–∞ –æ—Å–Ω–æ–≤–µ
# –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ùíì, –∞ —Ç–∞–∫–∂–µ —Ç–∞–±–ª–∏—Ü—ã —Å–∏–Ω–¥—Ä–æ–º–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö
# –æ—à–∏–±–æ–∫
zeros_row = np.zeros((1, H.shape[1]))

H_zeros = np.vstack((H, zeros_row))

ones_column = np.ones((H_zeros.shape[0], 1))

H_Star = np.hstack((H_zeros, ones_column))
print('H* = \n',H_Star)

sums = []

for row in G:
    row_sum = sum(row)
    sums.append(row_sum)

print("sum = ", sums)

b = [1 if num % 2 != 0 else 0 for num in sums]

G_Star = np.column_stack((G, b))

print("G* = \n", G_Star)

# –¢–∞–±–ª–∏—Ü–∞ —Å–∏–Ω–¥—Ä–æ–º–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü –•—ç–º–º–∏–Ω–≥–∞
extended_syndrome_map = {}

for i in range(H_Star.shape[0]):
    error = np.zeros(H_Star.shape[0])
    error[i] = 1
    
    syndrome = np.dot(error, H_Star) % 2
    
    extended_syndrome_map[tuple(syndrome)] = tuple(error)

for syndrome, error in extended_syndrome_map.items():
    print(f"–°–∏–Ω–¥—Ä–æ–º: {syndrome} –û—à–∏–±–∫–∞: {error}")

# –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –•—ç–º–º–∏–Ω–≥–∞ –¥–ª—è –æ–¥–Ω–æ-,
# –¥–≤—É—Ö-, —Ç—Ä—ë—Ö- –∏ —á–µ—Ç—ã—Ä—ë—Ö–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è ùíì=ùüê,ùüë,ùüí.
word = np.zeros(G_Star.shape[0])
word[0] = 1
# –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω—ã n
code_word = np.dot(word, G_Star) % 2

# –í–Ω–æ—Å–∏–º –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É
error_index = 0
code_word_with_error = code_word.copy()
code_word_with_error[error_index] = (code_word_with_error[error_index] + 1) % 2

# –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–Ω–¥—Ä–æ–º
syndrome = np.dot(code_word_with_error, H_Star) % 2
print(syndrome)
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–±–ª–∏—Ü—É —Å–∏–Ω–¥—Ä–æ–º–æ–≤
corrected_code_word = None
if tuple(syndrome) in extended_syndrome_map:
    corrected_code_word = code_word_with_error.copy()
    for i, bit in enumerate(extended_syndrome_map[tuple(syndrome)]):
        corrected_code_word[i] = (corrected_code_word[i] + bit) % 2
else:
    print("–û—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
if np.array_equal(code_word, corrected_code_word):
    print("–û—à–∏–±–∫—É —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
else:
    print("–û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

print("–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", code_word)
print("–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π:", code_word_with_error)
print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", corrected_code_word)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–≤—É—Ö–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
code_word = np.dot(word, G_Star) % 2

# –í–Ω–æ—Å–∏–º –¥–≤—É—Ö–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É
error_index_1 = 0
error_index_2 = 1
code_word_with_error = code_word.copy()
code_word_with_error[error_index_1] = (code_word_with_error[error_index_1] + 1) % 2
code_word_with_error[error_index_2] = (code_word_with_error[error_index_2] + 1) % 2

syndrome = np.dot(code_word_with_error, H_Star) % 2
print(syndrome)
# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–±–ª–∏—Ü—É —Å–∏–Ω–¥—Ä–æ–º–æ–≤
corrected_code_word = None
if tuple(syndrome) in extended_syndrome_map:
    corrected_code_word = code_word_with_error.copy()
    for i, bit in enumerate(extended_syndrome_map[tuple(syndrome)]):
        corrected_code_word[i] = (corrected_code_word[i] + bit) % 2
else:
    print("2. –û—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
if np.array_equal(code_word, corrected_code_word):
    print("2. –û—à–∏–±–∫—É —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
else:
    print("2. –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

print("2. –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", code_word)
print("2. –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π:", code_word_with_error)
print("2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", corrected_code_word)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ç—Ä—ë—Ö–∫—Ä–∞—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
code_word = np.dot(word, G_Star) % 2

# –í–Ω–æ—Å–∏–º –¥–≤—É—Ö–∫—Ä–∞—Ç–Ω—É—é –æ—à–∏–±–∫—É
error_index_1 = 0
error_index_2 = 1
error_index_3 = 2
code_word_with_error = code_word.copy()
code_word_with_error[error_index_1] = (code_word_with_error[error_index_1] + 1) % 2
code_word_with_error[error_index_2] = (code_word_with_error[error_index_2] + 1) % 2
code_word_with_error[error_index_3] = (code_word_with_error[error_index_2] + 1) % 2

# –í—ã—á–∏—Å–ª—è–µ–º —Å–∏–Ω–¥—Ä–æ–º
syndrome = np.dot(code_word_with_error, H_Star) % 2
print(syndrome)
corrected_code_word = None
if tuple(syndrome) in extended_syndrome_map:
    corrected_code_word = code_word_with_error.copy()
    for i, bit in enumerate(extended_syndrome_map[tuple(syndrome)]):
        corrected_code_word[i] = (corrected_code_word[i] + bit) % 2
else:
    print("3. –û—à–∏–±–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

# –£–±–µ–∂–¥–∞–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
if np.array_equal(code_word, corrected_code_word):
    print("3. –û—à–∏–±–∫—É —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
else:
    print("3. –û—à–∏–±–∫–∞ –Ω–µ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.")

print("3. –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", code_word)
print("3. –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ —Å –æ—à–∏–±–∫–æ–π:", code_word_with_error)
print("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ:", corrected_code_word)
